-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity qemulator is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    action1 : IN STD_LOGIC_VECTOR (8 downto 0);
    action1_ap_vld : IN STD_LOGIC;
    action2 : IN STD_LOGIC_VECTOR (8 downto 0);
    action2_ap_vld : IN STD_LOGIC;
    reward1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    reward1_ap_vld : OUT STD_LOGIC;
    reward2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    reward2_ap_vld : OUT STD_LOGIC );
end;


architecture behav of qemulator is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "qemulator_qemulator,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.592625,HLS_SYN_LAT=17,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=290,HLS_SYN_LUT=295,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv30_2D41 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000010110101000001";

    signal action1_preg : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal action1_in_sig : STD_LOGIC_VECTOR (8 downto 0);
    signal action1_ap_vld_preg : STD_LOGIC := '0';
    signal action1_ap_vld_in_sig : STD_LOGIC;
    signal action2_preg : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal action2_in_sig : STD_LOGIC_VECTOR (8 downto 0);
    signal action2_ap_vld_preg : STD_LOGIC := '0';
    signal action2_ap_vld_in_sig : STD_LOGIC;
    signal cos_hw_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal cos_hw_ce0 : STD_LOGIC;
    signal cos_hw_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal cos_hw_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal cos_hw_ce1 : STD_LOGIC;
    signal cos_hw_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal cos_hw_address2 : STD_LOGIC_VECTOR (3 downto 0);
    signal cos_hw_ce2 : STD_LOGIC;
    signal cos_hw_q2 : STD_LOGIC_VECTOR (15 downto 0);
    signal cos_hw_address3 : STD_LOGIC_VECTOR (3 downto 0);
    signal cos_hw_ce3 : STD_LOGIC;
    signal cos_hw_q3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sin_hw_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sin_hw_ce0 : STD_LOGIC;
    signal sin_hw_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sin_hw_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sin_hw_ce1 : STD_LOGIC;
    signal sin_hw_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sin_hw_address2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sin_hw_ce2 : STD_LOGIC;
    signal sin_hw_q2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sin_hw_address3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sin_hw_ce3 : STD_LOGIC;
    signal sin_hw_q3 : STD_LOGIC_VECTOR (15 downto 0);
    signal action1_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal action2_blk_n : STD_LOGIC;
    signal sin_hw_load_reg_958 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sext_ln1319_fu_256_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln1319_1_fu_260_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln1319_2_fu_264_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln1319_2_reg_975 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln1319_3_fu_268_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sin_hw_load_2_reg_989 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1319_4_fu_272_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln1319_5_fu_276_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln1319_6_fu_280_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln1319_6_reg_1006 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln1319_7_fu_284_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sext_ln1319_11_fu_382_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln1319_15_fu_398_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal output_state_V_4_reg_1072 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal output_state_V_6_reg_1077 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1319_18_fu_602_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln1319_20_fu_606_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln1319_19_fu_610_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal sext_ln1319_21_fu_613_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_888_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_894_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln587_fu_208_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln587_1_fu_226_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln587_2_fu_232_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln587_3_fu_250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal a1_V_fu_188_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln1540_fu_214_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ret_V_fu_218_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal a2_V_fu_198_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln1540_1_fu_238_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ret_V_1_fu_242_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln1319_1_fu_260_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1319_5_fu_276_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_708_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_715_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_722_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_729_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_736_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_743_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_750_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_757_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal u2_V_2_fu_334_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal u2_V_4_fu_352_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal u2_V_3_fu_343_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal u1_V_6_fu_288_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal u2_V_5_fu_361_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal u1_V_7_fu_293_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal u1_V_9_fu_311_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal u2_V_1_fu_329_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal u1_V_8_fu_302_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal u1_V_10_fu_320_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_764_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_770_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_776_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_783_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_790_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_796_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_802_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_809_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal st_gate_V_fu_410_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal st_gate_V_10_fu_437_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal st_gate_V_8_fu_419_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal st_gate_V_9_fu_428_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal st_gate_V_11_fu_446_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal st_gate_V_14_fu_473_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal st_gate_V_12_fu_455_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal st_gate_V_13_fu_464_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_816_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_825_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_834_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_843_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal quantum_state_V_fu_514_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal quantum_state_V_3_fu_541_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal quantum_state_V_1_fu_523_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal quantum_state_V_2_fu_532_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_852_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_861_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_870_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_879_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal output_state_V_fu_566_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_state_V_5_fu_584_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_909_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_2_fu_616_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1319_1_fu_633_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal shl_ln_fu_625_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln1319_22_fu_641_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_14_fu_645_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_900_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_4_fu_662_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1319_3_fu_679_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal shl_ln1319_2_fu_671_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln1319_23_fu_687_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_15_fu_691_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_708_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_708_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_715_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_715_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_722_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_722_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_729_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_729_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_736_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_736_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_743_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_743_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_750_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_750_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_757_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_757_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_764_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_770_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_776_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_783_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_790_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_796_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_802_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_809_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_816_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_825_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_834_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_843_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_852_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1393_fu_550_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_852_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1393_1_fu_554_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_852_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_861_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1394_fu_558_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_861_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1394_1_fu_562_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_861_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_870_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_870_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_870_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_879_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_879_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_879_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_888_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_888_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_894_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_894_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_900_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_900_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_909_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_909_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component qemulator_mul_mul_16s_16s_30_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component qemulator_am_addmul_16s_16s_14ns_30_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component qemulator_am_submul_16s_16s_14ns_30_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component qemulator_mac_muladd_16s_16s_30s_30_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (29 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component qemulator_cos_hw_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address2 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address3 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component qemulator_sin_hw_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address2 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address3 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    cos_hw_U : component qemulator_cos_hw_ROM_AUTO_1R
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cos_hw_address0,
        ce0 => cos_hw_ce0,
        q0 => cos_hw_q0,
        address1 => cos_hw_address1,
        ce1 => cos_hw_ce1,
        q1 => cos_hw_q1,
        address2 => cos_hw_address2,
        ce2 => cos_hw_ce2,
        q2 => cos_hw_q2,
        address3 => cos_hw_address3,
        ce3 => cos_hw_ce3,
        q3 => cos_hw_q3);

    sin_hw_U : component qemulator_sin_hw_ROM_AUTO_1R
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sin_hw_address0,
        ce0 => sin_hw_ce0,
        q0 => sin_hw_q0,
        address1 => sin_hw_address1,
        ce1 => sin_hw_ce1,
        q1 => sin_hw_q1,
        address2 => sin_hw_address2,
        ce2 => sin_hw_ce2,
        q2 => sin_hw_q2,
        address3 => sin_hw_address3,
        ce3 => sin_hw_ce3,
        q3 => sin_hw_q3);

    mul_mul_16s_16s_30_4_1_U1 : component qemulator_mul_mul_16s_16s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_708_p0,
        din1 => grp_fu_708_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_708_p2);

    mul_mul_16s_16s_30_4_1_U2 : component qemulator_mul_mul_16s_16s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_715_p0,
        din1 => grp_fu_715_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_715_p2);

    mul_mul_16s_16s_30_4_1_U3 : component qemulator_mul_mul_16s_16s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_722_p0,
        din1 => grp_fu_722_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_722_p2);

    mul_mul_16s_16s_30_4_1_U4 : component qemulator_mul_mul_16s_16s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_729_p0,
        din1 => grp_fu_729_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_729_p2);

    mul_mul_16s_16s_30_4_1_U5 : component qemulator_mul_mul_16s_16s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_736_p0,
        din1 => grp_fu_736_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_736_p2);

    mul_mul_16s_16s_30_4_1_U6 : component qemulator_mul_mul_16s_16s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_743_p0,
        din1 => grp_fu_743_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_743_p2);

    mul_mul_16s_16s_30_4_1_U7 : component qemulator_mul_mul_16s_16s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_750_p0,
        din1 => grp_fu_750_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_750_p2);

    mul_mul_16s_16s_30_4_1_U8 : component qemulator_mul_mul_16s_16s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_757_p0,
        din1 => grp_fu_757_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_757_p2);

    mul_mul_16s_16s_30_4_1_U9 : component qemulator_mul_mul_16s_16s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => u2_V_2_fu_334_p4,
        din1 => grp_fu_764_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_764_p2);

    mul_mul_16s_16s_30_4_1_U10 : component qemulator_mul_mul_16s_16s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => u2_V_4_fu_352_p4,
        din1 => grp_fu_770_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_770_p2);

    mul_mul_16s_16s_30_4_1_U11 : component qemulator_mul_mul_16s_16s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => u2_V_3_fu_343_p4,
        din1 => grp_fu_776_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_776_p2);

    mul_mul_16s_16s_30_4_1_U12 : component qemulator_mul_mul_16s_16s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => u2_V_5_fu_361_p4,
        din1 => grp_fu_783_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_783_p2);

    mul_mul_16s_16s_30_4_1_U13 : component qemulator_mul_mul_16s_16s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => u1_V_7_fu_293_p4,
        din1 => grp_fu_790_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_790_p2);

    mul_mul_16s_16s_30_4_1_U14 : component qemulator_mul_mul_16s_16s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => u1_V_9_fu_311_p4,
        din1 => grp_fu_796_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_796_p2);

    mul_mul_16s_16s_30_4_1_U15 : component qemulator_mul_mul_16s_16s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_802_p0,
        din1 => u1_V_8_fu_302_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_802_p2);

    mul_mul_16s_16s_30_4_1_U16 : component qemulator_mul_mul_16s_16s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => u1_V_10_fu_320_p4,
        din1 => grp_fu_809_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_809_p2);

    am_addmul_16s_16s_14ns_30_4_1_U17 : component qemulator_am_addmul_16s_16s_14ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => st_gate_V_10_fu_437_p4,
        din1 => st_gate_V_fu_410_p4,
        din2 => grp_fu_816_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_816_p3);

    am_submul_16s_16s_14ns_30_4_1_U18 : component qemulator_am_submul_16s_16s_14ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => st_gate_V_8_fu_419_p4,
        din1 => st_gate_V_9_fu_428_p4,
        din2 => grp_fu_825_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_825_p3);

    am_addmul_16s_16s_14ns_30_4_1_U19 : component qemulator_am_addmul_16s_16s_14ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => st_gate_V_14_fu_473_p4,
        din1 => st_gate_V_11_fu_446_p4,
        din2 => grp_fu_834_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_834_p3);

    am_submul_16s_16s_14ns_30_4_1_U20 : component qemulator_am_submul_16s_16s_14ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => st_gate_V_12_fu_455_p4,
        din1 => st_gate_V_13_fu_464_p4,
        din2 => grp_fu_843_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_843_p3);

    am_addmul_16s_16s_14ns_30_4_1_U21 : component qemulator_am_addmul_16s_16s_14ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_852_p0,
        din1 => grp_fu_852_p1,
        din2 => grp_fu_852_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_852_p3);

    am_submul_16s_16s_14ns_30_4_1_U22 : component qemulator_am_submul_16s_16s_14ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_861_p0,
        din1 => grp_fu_861_p1,
        din2 => grp_fu_861_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_861_p3);

    am_addmul_16s_16s_14ns_30_4_1_U23 : component qemulator_am_addmul_16s_16s_14ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_870_p0,
        din1 => grp_fu_870_p1,
        din2 => grp_fu_870_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_870_p3);

    am_submul_16s_16s_14ns_30_4_1_U24 : component qemulator_am_submul_16s_16s_14ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_879_p0,
        din1 => grp_fu_879_p1,
        din2 => grp_fu_879_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_879_p3);

    mul_mul_16s_16s_30_4_1_U25 : component qemulator_mul_mul_16s_16s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_888_p0,
        din1 => grp_fu_888_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_888_p2);

    mul_mul_16s_16s_30_4_1_U26 : component qemulator_mul_mul_16s_16s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_894_p0,
        din1 => grp_fu_894_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_894_p2);

    mac_muladd_16s_16s_30s_30_4_1_U27 : component qemulator_mac_muladd_16s_16s_30s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 30,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_900_p0,
        din1 => grp_fu_900_p1,
        din2 => grp_fu_888_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_900_p3);

    mac_muladd_16s_16s_30s_30_4_1_U28 : component qemulator_mac_muladd_16s_16s_30s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 30,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_909_p0,
        din1 => grp_fu_909_p1,
        din2 => grp_fu_894_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_909_p3);





    action1_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                action1_ap_vld_preg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    action1_ap_vld_preg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = action1_ap_vld)) then 
                    action1_ap_vld_preg <= action1_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    action1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                action1_preg <= ap_const_lv9_0;
            else
                if ((ap_const_logic_1 = action1_ap_vld)) then 
                    action1_preg <= action1;
                end if; 
            end if;
        end if;
    end process;


    action2_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                action2_ap_vld_preg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    action2_ap_vld_preg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = action2_ap_vld)) then 
                    action2_ap_vld_preg <= action2_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    action2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                action2_preg <= ap_const_lv9_0;
            else
                if ((ap_const_logic_1 = action2_ap_vld)) then 
                    action2_preg <= action2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                output_state_V_4_reg_1072 <= grp_fu_861_p3(29 downto 14);
                output_state_V_6_reg_1077 <= grp_fu_879_p3(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                sext_ln1319_2_reg_975 <= sext_ln1319_2_fu_264_p1;
                sext_ln1319_6_reg_1006 <= sext_ln1319_6_fu_280_p1;
                sin_hw_load_2_reg_989 <= sin_hw_q1;
                sin_hw_load_reg_958 <= sin_hw_q3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (action1_ap_vld_in_sig, action2_ap_vld_in_sig, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_logic_0 = action2_ap_vld_in_sig) or (ap_const_logic_0 = action1_ap_vld_in_sig))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a1_V_fu_188_p4 <= action1_in_sig(6 downto 3);
    a2_V_fu_198_p4 <= action2_in_sig(6 downto 3);

    action1_ap_vld_in_sig_assign_proc : process(action1_ap_vld, action1_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = action1_ap_vld)) then 
            action1_ap_vld_in_sig <= action1_ap_vld;
        else 
            action1_ap_vld_in_sig <= action1_ap_vld_preg;
        end if; 
    end process;


    action1_blk_n_assign_proc : process(action1_ap_vld, ap_CS_fsm_state1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            action1_blk_n <= action1_ap_vld;
        else 
            action1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    action1_in_sig_assign_proc : process(action1, action1_preg, action1_ap_vld)
    begin
        if ((ap_const_logic_1 = action1_ap_vld)) then 
            action1_in_sig <= action1;
        else 
            action1_in_sig <= action1_preg;
        end if; 
    end process;


    action2_ap_vld_in_sig_assign_proc : process(action2_ap_vld, action2_ap_vld_preg)
    begin
        if ((ap_const_logic_1 = action2_ap_vld)) then 
            action2_ap_vld_in_sig <= action2_ap_vld;
        else 
            action2_ap_vld_in_sig <= action2_ap_vld_preg;
        end if; 
    end process;


    action2_blk_n_assign_proc : process(action2_ap_vld, ap_CS_fsm_state1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            action2_blk_n <= action2_ap_vld;
        else 
            action2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    action2_in_sig_assign_proc : process(action2, action2_preg, action2_ap_vld)
    begin
        if ((ap_const_logic_1 = action2_ap_vld)) then 
            action2_in_sig <= action2;
        else 
            action2_in_sig <= action2_preg;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(action1_ap_vld_in_sig, action2_ap_vld_in_sig)
    begin
        if (((ap_const_logic_0 = action2_ap_vld_in_sig) or (ap_const_logic_0 = action1_ap_vld_in_sig))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(action1_ap_vld_in_sig, action2_ap_vld_in_sig)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = action2_ap_vld_in_sig) or (ap_const_logic_0 = action1_ap_vld_in_sig));
    end process;

    cos_hw_address0 <= zext_ln587_3_fu_250_p1(4 - 1 downto 0);
    cos_hw_address1 <= zext_ln587_2_fu_232_p1(4 - 1 downto 0);
    cos_hw_address2 <= zext_ln587_1_fu_226_p1(4 - 1 downto 0);
    cos_hw_address3 <= zext_ln587_fu_208_p1(4 - 1 downto 0);

    cos_hw_ce0_assign_proc : process(action1_ap_vld_in_sig, action2_ap_vld_in_sig, ap_CS_fsm_state1)
    begin
        if ((not(((ap_const_logic_0 = action2_ap_vld_in_sig) or (ap_const_logic_0 = action1_ap_vld_in_sig))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cos_hw_ce0 <= ap_const_logic_1;
        else 
            cos_hw_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cos_hw_ce1_assign_proc : process(action1_ap_vld_in_sig, action2_ap_vld_in_sig, ap_CS_fsm_state1)
    begin
        if ((not(((ap_const_logic_0 = action2_ap_vld_in_sig) or (ap_const_logic_0 = action1_ap_vld_in_sig))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cos_hw_ce1 <= ap_const_logic_1;
        else 
            cos_hw_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cos_hw_ce2_assign_proc : process(action1_ap_vld_in_sig, action2_ap_vld_in_sig, ap_CS_fsm_state1)
    begin
        if ((not(((ap_const_logic_0 = action2_ap_vld_in_sig) or (ap_const_logic_0 = action1_ap_vld_in_sig))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cos_hw_ce2 <= ap_const_logic_1;
        else 
            cos_hw_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    cos_hw_ce3_assign_proc : process(action1_ap_vld_in_sig, action2_ap_vld_in_sig, ap_CS_fsm_state1)
    begin
        if ((not(((ap_const_logic_0 = action2_ap_vld_in_sig) or (ap_const_logic_0 = action1_ap_vld_in_sig))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cos_hw_ce3 <= ap_const_logic_1;
        else 
            cos_hw_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_708_p0 <= sext_ln1319_fu_256_p1(16 - 1 downto 0);
    grp_fu_708_p1 <= sext_ln1319_1_fu_260_p1(16 - 1 downto 0);
    grp_fu_715_p0 <= sext_ln1319_fu_256_p1(16 - 1 downto 0);
    grp_fu_715_p1 <= sext_ln1319_2_fu_264_p1(16 - 1 downto 0);
    grp_fu_722_p0 <= sext_ln1319_3_fu_268_p1(16 - 1 downto 0);
    grp_fu_722_p1 <= sext_ln1319_1_fu_260_p1(16 - 1 downto 0);
    grp_fu_729_p0 <= sext_ln1319_3_fu_268_p1(16 - 1 downto 0);
    grp_fu_729_p1 <= sext_ln1319_2_fu_264_p1(16 - 1 downto 0);
    grp_fu_736_p0 <= sext_ln1319_4_fu_272_p1(16 - 1 downto 0);
    grp_fu_736_p1 <= sext_ln1319_5_fu_276_p1(16 - 1 downto 0);
    grp_fu_743_p0 <= sext_ln1319_4_fu_272_p1(16 - 1 downto 0);
    grp_fu_743_p1 <= sext_ln1319_6_fu_280_p1(16 - 1 downto 0);
    grp_fu_750_p0 <= sext_ln1319_7_fu_284_p1(16 - 1 downto 0);
    grp_fu_750_p1 <= sext_ln1319_5_fu_276_p1(16 - 1 downto 0);
    grp_fu_757_p0 <= sext_ln1319_7_fu_284_p1(16 - 1 downto 0);
    grp_fu_757_p1 <= sext_ln1319_6_fu_280_p1(16 - 1 downto 0);
    grp_fu_764_p1 <= sext_ln1319_2_reg_975(16 - 1 downto 0);
    grp_fu_770_p1 <= sext_ln1319_2_reg_975(16 - 1 downto 0);
    grp_fu_776_p1 <= sext_ln1319_11_fu_382_p1(16 - 1 downto 0);
    grp_fu_783_p1 <= sext_ln1319_11_fu_382_p1(16 - 1 downto 0);
    grp_fu_790_p1 <= sext_ln1319_6_reg_1006(16 - 1 downto 0);
    grp_fu_796_p1 <= sext_ln1319_6_reg_1006(16 - 1 downto 0);
    grp_fu_802_p0 <= sext_ln1319_15_fu_398_p1(16 - 1 downto 0);
    grp_fu_809_p1 <= sext_ln1319_15_fu_398_p1(16 - 1 downto 0);
    grp_fu_816_p2 <= ap_const_lv30_2D41(14 - 1 downto 0);
    grp_fu_825_p2 <= ap_const_lv30_2D41(14 - 1 downto 0);
    grp_fu_834_p2 <= ap_const_lv30_2D41(14 - 1 downto 0);
    grp_fu_843_p2 <= ap_const_lv30_2D41(14 - 1 downto 0);
    grp_fu_852_p0 <= sext_ln1393_fu_550_p1(16 - 1 downto 0);
    grp_fu_852_p1 <= sext_ln1393_1_fu_554_p1(16 - 1 downto 0);
    grp_fu_852_p2 <= ap_const_lv30_2D41(14 - 1 downto 0);
    grp_fu_861_p0 <= sext_ln1394_fu_558_p1(16 - 1 downto 0);
    grp_fu_861_p1 <= sext_ln1394_1_fu_562_p1(16 - 1 downto 0);
    grp_fu_861_p2 <= ap_const_lv30_2D41(14 - 1 downto 0);
    grp_fu_870_p0 <= sext_ln1394_fu_558_p1(16 - 1 downto 0);
    grp_fu_870_p1 <= sext_ln1394_1_fu_562_p1(16 - 1 downto 0);
    grp_fu_870_p2 <= ap_const_lv30_2D41(14 - 1 downto 0);
    grp_fu_879_p0 <= sext_ln1393_1_fu_554_p1(16 - 1 downto 0);
    grp_fu_879_p1 <= sext_ln1393_fu_550_p1(16 - 1 downto 0);
    grp_fu_879_p2 <= ap_const_lv30_2D41(14 - 1 downto 0);
    grp_fu_888_p0 <= sext_ln1319_18_fu_602_p1(16 - 1 downto 0);
    grp_fu_888_p1 <= sext_ln1319_18_fu_602_p1(16 - 1 downto 0);
    grp_fu_894_p0 <= sext_ln1319_20_fu_606_p1(16 - 1 downto 0);
    grp_fu_894_p1 <= sext_ln1319_20_fu_606_p1(16 - 1 downto 0);
    grp_fu_900_p0 <= sext_ln1319_19_fu_610_p1(16 - 1 downto 0);
    grp_fu_900_p1 <= sext_ln1319_19_fu_610_p1(16 - 1 downto 0);
    grp_fu_909_p0 <= sext_ln1319_21_fu_613_p1(16 - 1 downto 0);
    grp_fu_909_p1 <= sext_ln1319_21_fu_613_p1(16 - 1 downto 0);
    output_state_V_5_fu_584_p4 <= grp_fu_870_p3(29 downto 14);
    output_state_V_fu_566_p4 <= grp_fu_852_p3(29 downto 14);
    quantum_state_V_1_fu_523_p4 <= grp_fu_825_p3(29 downto 14);
    quantum_state_V_2_fu_532_p4 <= grp_fu_834_p3(29 downto 14);
    quantum_state_V_3_fu_541_p4 <= grp_fu_843_p3(29 downto 14);
    quantum_state_V_fu_514_p4 <= grp_fu_816_p3(29 downto 14);
    r_V_14_fu_645_p2 <= std_logic_vector(unsigned(shl_ln_fu_625_p3) + unsigned(sext_ln1319_22_fu_641_p1));
    r_V_15_fu_691_p2 <= std_logic_vector(unsigned(shl_ln1319_2_fu_671_p3) + unsigned(sext_ln1319_23_fu_687_p1));
    ret_V_1_fu_242_p3 <= (trunc_ln1540_1_fu_238_p1 & ap_const_lv1_0);
    ret_V_fu_218_p3 <= (trunc_ln1540_fu_214_p1 & ap_const_lv1_0);
    reward1 <= r_V_14_fu_645_p2(29 downto 14);

    reward1_ap_vld_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            reward1_ap_vld <= ap_const_logic_1;
        else 
            reward1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    reward2 <= r_V_15_fu_691_p2(29 downto 14);

    reward2_ap_vld_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            reward2_ap_vld <= ap_const_logic_1;
        else 
            reward2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln1319_11_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(u1_V_6_fu_288_p2),30));

        sext_ln1319_15_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(u2_V_1_fu_329_p2),30));

        sext_ln1319_18_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(output_state_V_fu_566_p4),30));

        sext_ln1319_19_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(output_state_V_4_reg_1072),30));

    sext_ln1319_1_fu_260_p0 <= sin_hw_q3;
        sext_ln1319_1_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1319_1_fu_260_p0),30));

        sext_ln1319_20_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(output_state_V_5_fu_584_p4),30));

        sext_ln1319_21_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(output_state_V_6_reg_1077),30));

        sext_ln1319_22_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1319_1_fu_633_p3),30));

        sext_ln1319_23_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1319_3_fu_679_p3),30));

        sext_ln1319_2_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(cos_hw_q3),30));

        sext_ln1319_3_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sin_hw_q2),30));

        sext_ln1319_4_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(cos_hw_q0),30));

    sext_ln1319_5_fu_276_p0 <= sin_hw_q1;
        sext_ln1319_5_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1319_5_fu_276_p0),30));

        sext_ln1319_6_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(cos_hw_q1),30));

        sext_ln1319_7_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sin_hw_q0),30));

        sext_ln1319_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(cos_hw_q2),30));

        sext_ln1393_1_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(quantum_state_V_3_fu_541_p4),17));

        sext_ln1393_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(quantum_state_V_fu_514_p4),17));

        sext_ln1394_1_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(quantum_state_V_2_fu_532_p4),17));

        sext_ln1394_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(quantum_state_V_1_fu_523_p4),17));

    shl_ln1319_1_fu_633_p3 <= (tmp_2_fu_616_p4 & ap_const_lv12_0);
    shl_ln1319_2_fu_671_p3 <= (tmp_4_fu_662_p4 & ap_const_lv14_0);
    shl_ln1319_3_fu_679_p3 <= (tmp_4_fu_662_p4 & ap_const_lv12_0);
    shl_ln_fu_625_p3 <= (tmp_2_fu_616_p4 & ap_const_lv14_0);
    sin_hw_address0 <= zext_ln587_3_fu_250_p1(4 - 1 downto 0);
    sin_hw_address1 <= zext_ln587_2_fu_232_p1(4 - 1 downto 0);
    sin_hw_address2 <= zext_ln587_1_fu_226_p1(4 - 1 downto 0);
    sin_hw_address3 <= zext_ln587_fu_208_p1(4 - 1 downto 0);

    sin_hw_ce0_assign_proc : process(action1_ap_vld_in_sig, action2_ap_vld_in_sig, ap_CS_fsm_state1)
    begin
        if ((not(((ap_const_logic_0 = action2_ap_vld_in_sig) or (ap_const_logic_0 = action1_ap_vld_in_sig))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sin_hw_ce0 <= ap_const_logic_1;
        else 
            sin_hw_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sin_hw_ce1_assign_proc : process(action1_ap_vld_in_sig, action2_ap_vld_in_sig, ap_CS_fsm_state1)
    begin
        if ((not(((ap_const_logic_0 = action2_ap_vld_in_sig) or (ap_const_logic_0 = action1_ap_vld_in_sig))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sin_hw_ce1 <= ap_const_logic_1;
        else 
            sin_hw_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sin_hw_ce2_assign_proc : process(action1_ap_vld_in_sig, action2_ap_vld_in_sig, ap_CS_fsm_state1)
    begin
        if ((not(((ap_const_logic_0 = action2_ap_vld_in_sig) or (ap_const_logic_0 = action1_ap_vld_in_sig))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sin_hw_ce2 <= ap_const_logic_1;
        else 
            sin_hw_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    sin_hw_ce3_assign_proc : process(action1_ap_vld_in_sig, action2_ap_vld_in_sig, ap_CS_fsm_state1)
    begin
        if ((not(((ap_const_logic_0 = action2_ap_vld_in_sig) or (ap_const_logic_0 = action1_ap_vld_in_sig))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            sin_hw_ce3 <= ap_const_logic_1;
        else 
            sin_hw_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    st_gate_V_10_fu_437_p4 <= grp_fu_783_p2(29 downto 14);
    st_gate_V_11_fu_446_p4 <= grp_fu_790_p2(29 downto 14);
    st_gate_V_12_fu_455_p4 <= grp_fu_796_p2(29 downto 14);
    st_gate_V_13_fu_464_p4 <= grp_fu_802_p2(29 downto 14);
    st_gate_V_14_fu_473_p4 <= grp_fu_809_p2(29 downto 14);
    st_gate_V_8_fu_419_p4 <= grp_fu_770_p2(29 downto 14);
    st_gate_V_9_fu_428_p4 <= grp_fu_776_p2(29 downto 14);
    st_gate_V_fu_410_p4 <= grp_fu_764_p2(29 downto 14);
    tmp_2_fu_616_p4 <= grp_fu_909_p3(29 downto 14);
    tmp_4_fu_662_p4 <= grp_fu_900_p3(29 downto 14);
    trunc_ln1540_1_fu_238_p1 <= action2_in_sig(3 - 1 downto 0);
    trunc_ln1540_fu_214_p1 <= action1_in_sig(3 - 1 downto 0);
    u1_V_10_fu_320_p4 <= grp_fu_729_p2(29 downto 14);
    u1_V_6_fu_288_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(sin_hw_load_reg_958));
    u1_V_7_fu_293_p4 <= grp_fu_708_p2(29 downto 14);
    u1_V_8_fu_302_p4 <= grp_fu_715_p2(29 downto 14);
    u1_V_9_fu_311_p4 <= grp_fu_722_p2(29 downto 14);
    u2_V_1_fu_329_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(sin_hw_load_2_reg_989));
    u2_V_2_fu_334_p4 <= grp_fu_736_p2(29 downto 14);
    u2_V_3_fu_343_p4 <= grp_fu_743_p2(29 downto 14);
    u2_V_4_fu_352_p4 <= grp_fu_750_p2(29 downto 14);
    u2_V_5_fu_361_p4 <= grp_fu_757_p2(29 downto 14);
    zext_ln587_1_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_218_p3),64));
    zext_ln587_2_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a2_V_fu_198_p4),64));
    zext_ln587_3_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_1_fu_242_p3),64));
    zext_ln587_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a1_V_fu_188_p4),64));
end behav;
